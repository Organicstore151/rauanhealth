import os
import json
from openai import OpenAI
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import ReplyKeyboardMarkup, KeyboardButton

# Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(os.environ["CREDS_JSON"])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(os.environ["SPREADSHEET_URL"]).sheet1

# /start –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üåÖ –£—Ç—Ä–æ")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü–∏—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å (–≤–æ–¥–∞, –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ç.–¥.) –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëá",
        reply_markup=reply_markup
    )
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
from datetime import datetime

AIP_BREAKFASTS = {
    0: "–¢—É–Ω–µ—Ü (70 –≥), –≥—Ä–µ—á–∫–∞ (220 –≥), –∞–≤–æ–∫–∞–¥–æ (40 –≥), –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ (1 —Å—Ç.–ª.)",
    1: "–ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ (70 –≥), —è–π—Ü–æ (1 —à—Ç.), –±—Ä–æ–∫–∫–æ–ª–∏ (100 –≥), —Ü–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞ (100 –≥), –∞–º–∞—Ä–∞–Ω—Ç–æ–≤—ã–µ –º–∞–∫–∞—Ä–æ–Ω—ã (220 –≥)",
    2: "–°—É–¥–∞–∫ —Ç—É—à—ë–Ω—ã–π (70 –≥), –ø—à–µ–Ω–æ (220 –≥), —Å–∞–ª–∞—Ç –∏–∑ –æ–≥—É—Ä—Ü–∞ –∏ –∞–≤–æ–∫–∞–¥–æ (50 –≥), –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ (1 —Å—Ç.–ª.)",
    3: "–°—ë–º–≥–∞ (80 –≥), –±—É—Ä—ã–π –∏ –¥–∏–∫–∏–π —Ä–∏—Å (220 –≥), —Å–∞–ª–∞—Ç: –æ–≥—É—Ä–µ—Ü, –ª–∏—Å—Ç–æ–≤–æ–π —Å–∞–ª–∞—Ç, –≥—Ä–µ—Ü–∫–∏–π –æ—Ä–µ—Ö (20 –≥)",
    4: "–û–º–ª–µ—Ç –∏–∑ 3 —è–∏—Ü —Å —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–º –º–æ–ª–æ–∫–æ–º, –∫–∏–Ω–æ–∞ (220 –≥), —Å–∞–ª–∞—Ç –∏–∑ –æ–≥—É—Ä—Ü–∞, –∞–≤–æ–∫–∞–¥–æ –∏ —Å–∞–ª–∞—Ç–∞",
    5: "–°–∞–ª–∞—Ç —Å —Å—ë–º–≥–æ–π, –∞–π—Å–±–µ—Ä–≥, –æ–≥—É—Ä–µ—Ü, –∞–≤–æ–∫–∞–¥–æ, –∫–µ–¥—Ä–æ–≤—ã–µ –æ—Ä–µ—à–∫–∏ (10 –≥), –ø—à–µ–Ω–æ (220 –≥), –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ (1 —Å—Ç.–ª.)",
    6: "–Ø–π—Ü–∞ (2 —à—Ç.), —Ç—É—à—ë–Ω—ã–µ –æ–≤–æ—â–∏ (–∫–∞–±–∞—á–æ–∫, –±—Ä–æ–∫–∫–æ–ª–∏, —Ü–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞), –±—É—Ä—ã–π —Ä–∏—Å (220 –≥), —Ç—ã–∫–≤–∞ –∑–∞–ø–µ—á—ë–Ω–Ω–∞—è (100 –≥)"
}

DAY_NAMES = {
    0: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    1: "–≤—Ç–æ—Ä–Ω–∏–∫",
    2: "—Å—Ä–µ–¥–∞",
    3: "—á–µ—Ç–≤–µ—Ä–≥",
    4: "–ø—è—Ç–Ω–∏—Ü–∞",
    5: "—Å—É–±–±–æ—Ç–∞",
    6: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}
async def morning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –ü–æ–¥–±–∏—Ä–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")

    day_idx = datetime.now().weekday()
    day_name = DAY_NAMES[day_idx]
    aip_breakfast = AIP_BREAKFASTS[day_idx]

    response = openai_client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {
                "role": "system",
                "content": (
                    "You are a friendly assistant helping a person who follows the Autoimmune Protocol (AIP). "
                    "They eat 4 times a day (~2400 kcal total), ~600 kcal for breakfast. They avoid gluten, dairy, sugar, nightshades, legumes. "
                    "They suffer from constipation, take medicine in the morning, and do back/spine exercises. "
                    f"Today is {day_name}. Use this breakfast example in your response: {aip_breakfast}. "
                    "Give a step-by-step morning plan (1, 2, 3...), including: hydration, medicine, breakfast, back exercises. "
                    "Be clear, warm, use emojis, and finish with motivation."
                )
            },
            {
                "role": "user",
                "content": "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ. –î–∞–π –º–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏, –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è –∏ —Å–ø–∏–Ω—ã."
            }
        ]
    )

    reply = response.choices[0].message.content
    await update.message.reply_text(reply)



async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()

    if "—É—Ç—Ä–æ" in text or "morning" in text:
        await morning(update, context)
        return

    # –∏–Ω–∞—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥
    row = [""] * 11
    row[0] = datetime.now().strftime("%Y-%m-%d")
    for line in text.split('\n'):
        if "—Å—Ç—É–ª" in line:
            row[1] = line.split(":", 1)[-1].strip()
        elif "–≤–æ–¥–∞" in line:
            row[2] = line.split(":", 1)[-1].strip()
        elif "–¥–≤–∏–∂–µ–Ω–∏–µ" in line:
            row[3] = line.split(":", 1)[-1].strip()
        elif "–∑–∞–≤—Ç—Ä–∞–∫" in line:
            row[4] = line.split(":", 1)[-1].strip()
        elif "–æ–±–µ–¥" in line:
            row[5] = line.split(":", 1)[-1].strip()
        elif "—É–∂–∏–Ω" in line:
            row[6] = line.split(":", 1)[-1].strip()
        elif "–ø–µ—Ä–µ–∫—É—Å" in line:
            row[7] = line.split(":", 1)[-1].strip()
        elif "—Å–ª–∞–¥–∫–æ–µ" in line:
            row[8] = line.split(":", 1)[-1].strip()
        elif "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ" in line:
            row[9] = line.split(":", 1)[-1].strip()
        else:
            row[10] += line.strip() + " "

    sheet.append_row(row)
    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º!")
       
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(os.environ["BOT_TOKEN"]).build()
openai_client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.run_polling()
