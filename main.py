import os
import json
from openai import OpenAI
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import gspread
from oauth2client.service_account import ServiceAccountCredentials

openai_client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

# Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(os.environ["CREDS_JSON"])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(os.environ["SPREADSHEET_URL"]).sheet1

DAY_NAMES = {
    0: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    1: "–≤—Ç–æ—Ä–Ω–∏–∫",
    2: "—Å—Ä–µ–¥–∞",
    3: "—á–µ—Ç–≤–µ—Ä–≥",
    4: "–ø—è—Ç–Ω–∏—Ü–∞",
    5: "—Å—É–±–±–æ—Ç–∞",
    6: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

# === –ú–ï–ù–Æ –ü–û –î–ù–Ø–ú ===
AIP_BREAKFASTS = {
    0: "–¢—É–Ω–µ—Ü (100 –≥), –≥—Ä–µ—á–∫–∞ (150 –≥), —è–π—Ü–æ (1 —à—Ç.), –∞–≤–æ–∫–∞–¥–æ (40 –≥), –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ (1 —Å—Ç.–ª.)",
    1: "–ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ (100 –≥), –º–∞–∫–∞—Ä–æ–Ω—ã –∞–º–∞—Ä–∞–Ω—Ç–æ–≤—ã–µ (180 –≥), —è–π—Ü–æ (1 —à—Ç.), –±—Ä–æ–∫–∫–æ–ª–∏ –∏ —Ü–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞ (–ø–æ 80 –≥), –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ (1 —Å—Ç.–ª.)",
    2: "–°—É–¥–∞–∫ (100 –≥), –ø—à–µ–Ω–æ (160 –≥), —è–π—Ü–æ (1 —à—Ç.), —Å–∞–ª–∞—Ç –∏–∑ –æ–≥—É—Ä—Ü–∞, —Å–∞–ª–∞—Ç–∞ –∏ –∞–≤–æ–∫–∞–¥–æ (50 –≥), –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ (1 —Å—Ç.–ª.)",
    3: "–°—ë–º–≥–∞ (100 –≥), —Å–º–µ—Å—å –±—É—Ä–æ–≥–æ –∏ –¥–∏–∫–æ–≥–æ —Ä–∏—Å–∞ (150 –≥), —Å–∞–ª–∞—Ç —Å –∞–≤–æ–∫–∞–¥–æ –∏ –ª–∏—Å—Ç–æ–≤—ã–º —Å–∞–ª–∞—Ç–æ–º, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ (1 —Å—Ç.–ª.)",
    4: "–û–º–ª–µ—Ç –∏–∑ 3 —è–∏—Ü –∏ 30 –º–ª —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–æ–ª–æ–∫–∞, –∫–∏–Ω–æ–∞ (160 –≥), —Å–∞–ª–∞—Ç —Å –∞–≤–æ–∫–∞–¥–æ (40 –≥), —Å—ë–º–≥–∞ (50 –≥), –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ (1 —Å—Ç.–ª.)",
    5: "–°—ë–º–≥–∞ (100 –≥), –ø—à–µ–Ω–æ (150 –≥), —è–π—Ü–æ (1 —à—Ç.), —Å–∞–ª–∞—Ç —Å –æ–≥—É—Ä—Ü–æ–º, –∞–≤–æ–∫–∞–¥–æ –∏ –∫–µ–¥—Ä–æ–≤—ã–º–∏ –æ—Ä–µ—à–∫–∞–º–∏ (10 –≥), –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ (1 —Å—Ç.–ª.)",
    6: "–Ø–π—Ü–∞ (2 —à—Ç.), –º–∏–Ω—Ç–∞–π (70 –≥), –±—É—Ä—ã–π —Ä–∏—Å (150 –≥), —Ç—ã–∫–≤–∞ –∑–∞–ø–µ—á—ë–Ω–Ω–∞—è (100 –≥), –∞–≤–æ–∫–∞–¥–æ (50 –≥), –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ (1 —Å—Ç.–ª.)"
}
AIP_SNACKS = {
    0: "–Ø–π—Ü–∞ (2 —à—Ç.), –∫–∏–Ω–æ–∞ (180 –≥), —Ü–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞ (100 –≥), –±—Ä—é—Å—Å–µ–ª—å—Å–∫–∞—è –∫–∞–ø—É—Å—Ç–∞ (100 –≥), –≥—Ä–µ—Ü–∫–∏–π –æ—Ä–µ—Ö (15 –≥)",
    1: "–ì—Ä–µ—á–∫–∞ (180 –≥), —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–æ–ª–æ–∫–æ (100 –º–ª), –∫—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ (100 –≥), —è–π—Ü–æ (1 —à—Ç.), –º–æ—Ä–∫–æ–≤—å (75 –≥), –±—Ä–∞–∑–∏–ª—å—Å–∫–∏–π –æ—Ä–µ—Ö (4 —à—Ç.)",
    2: "–°—É–¥–∞–∫ (90 –≥), –∫–∏–Ω–æ–∞ (180 –≥), —Ç—ã–∫–≤–∞ (150 –≥), –≥—Ä–µ—Ü–∫–∏–π –æ—Ä–µ—Ö (20 –≥), –æ–≥—É—Ä–µ—Ü (100 –≥)",
    3: "–ò–Ω–¥–µ–π–∫–∞ (90 –≥), —Å–º–µ—Å—å –±—É—Ä–æ–≥–æ –∏ –¥–∏–∫–æ–≥–æ —Ä–∏—Å–∞ (180 –≥), –æ–≤–æ—â–∏ (–±—Ä–æ–∫–∫–æ–ª–∏, —Ü–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞, –∫–∞–±–∞—á–æ–∫ ‚Äì 150 –≥), –∞–≤–æ–∫–∞–¥–æ (50 –≥)",
    4: "–°–µ–º–≥–∞ (90 –≥), –∫–∏–Ω–æ–∞ (180 –≥), —Ü—É–∫–∫–∏–Ω–∏ (100 –≥), –æ–≥—É—Ä–µ—Ü (150 –≥), –æ–ª–∏–≤–∫–æ–≤–æ–µ/–ª—å–Ω—è–Ω–æ–µ –º–∞—Å–ª–æ (1 —Å—Ç.–ª.)",
    5: "–ò–Ω–¥–µ–π–∫–∞ (90 –≥), –≥—Ä–µ—á–∫–∞ (180 –≥), –±—Ä–æ–∫–∫–æ–ª–∏ (150 –≥), —Ü–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞ (100 –≥), –∞–≤–æ–∫–∞–¥–æ (40 –≥)",
    6: "–ú–∏–Ω—Ç–∞–π (90 –≥), –ø—à–µ–Ω–æ (180 –≥), —è–π—Ü–æ (1 —à—Ç.), –∫—É—Ä–∞–≥–∞ (20 –≥), –∫–µ–¥—Ä–æ–≤—ã–µ –æ—Ä–µ—Ö–∏ (10 –≥)"
}
AIP_LUNCHES = {
    0: "–ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ (100 –≥), –±—É—Ä—ã–π —Ä–∏—Å (180 –≥), –∫–∞–±–∞—á–æ–∫, –±—Ä–æ–∫–∫–æ–ª–∏, —Ü–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞ ‚Äî –ø–æ 70 –≥, –∫—É—Ä–∞–≥–∞ (15 –≥), –≥—Ä–µ—Ü–∫–∏–π –æ—Ä–µ—Ö (10 –≥), –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ (1 —Å—Ç.–ª.)",
    1: "–ì–æ–≤—è–¥–∏–Ω–∞ (90 –≥), –∫–∏–Ω–æ–∞ (180 –≥), —Å–≤–µ–∫–ª–∞ (150 –≥), –º–æ—Ä–∫–æ–≤—å (75 –≥), –æ–≥—É—Ä–µ—Ü (100 –≥), –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ (1 —Å—Ç.–ª.)",
    2: "–ò–Ω–¥–µ–π–∫–∞ (90 –≥), –ø—à–µ–Ω–æ (180 –≥), –∫–∞–ø—É—Å—Ç—ã: –±–µ–ª–æ–∫–æ—á–∞–Ω–Ω–∞—è –∏ –±—Ä—é—Å—Å–µ–ª—å—Å–∫–∞—è ‚Äì 240 –≥, –∫—É—Ä–∞–≥–∞ (20 –≥)",
    3: "–ò–Ω–¥–µ–π–∫–∞ (90 –≥), –≥—Ä–µ—á–∫–∞ (180 –≥), —Å–≤–µ–∫–ª–∞ (150 –≥), –≥—Ä–µ—Ü–∫–∏–π –æ—Ä–µ—Ö (20 –≥)",
    4: "–ú—è—Å–æ –∫—Ä–æ–ª–∏–∫–∞ (90 –≥), –º–∞–∫–∞—Ä–æ–Ω—ã –∞–º–∞—Ä–∞–Ω—Ç–æ–≤—ã–µ (180 –≥), —Å–∞–ª–∞—Ç: –æ–≥—É—Ä–µ—Ü (100 –≥), —Å–∞–ª–∞—Ç –ª–∏—Å—Ç–æ–≤–æ–π (20 –≥), —Ü—É–∫–∫–∏–Ω–∏ (100 –≥)",
    5: "–ò–Ω–¥–µ–π–∫–∞ (90 –≥), –ø—à–µ–Ω–æ (180 –≥), –±—Ä–æ–∫–∫–æ–ª–∏, —Ü–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞, –∫–∞–ø—É—Å—Ç–∞ –±–µ–ª–æ–∫–æ—á–∞–Ω–Ω–∞—è ‚Äì –≤—Å–µ–≥–æ 300 –≥",
    6: "–ö—Ä–æ–ª–∏–∫ (100 –≥), –≥—Ä–µ—á–∫–∞ (180 –≥), —Ç—ã–∫–≤–∞ (200 –≥), –æ–≥—É—Ä–µ—Ü (150 –≥), –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ (1 —Å—Ç.–ª.)"
}
AIP_DINNERS = {
    0: "–¢—Ä–µ—Å–∫–∞ (100 –≥), –≥—Ä–µ—á–∫–∞ (180 –≥), —Ü—É–∫–∫–∏–Ω–∏ (200 –≥), –∞–≤–æ–∫–∞–¥–æ (50 –≥), —è–±–ª–æ–∫–æ (150 –≥)",
    1: "–°—É–¥–∞–∫ (90 –≥), –º–∞–∫–∞—Ä–æ–Ω—ã –∞–º–∞—Ä–∞–Ω—Ç–æ–≤—ã–µ (180 –≥), –∞–≤–æ–∫–∞–¥–æ (50 –≥), –æ–≥—É—Ä–µ—Ü (100 –≥), –∑–µ–ª–µ–Ω—å",
    2: "–ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ (90 –≥), —Ä–∏—Å (180 –≥), –±—Ä–æ–∫–∫–æ–ª–∏ –∏ —Ü–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞ (150 –≥), –≥—Ä–µ—Ü–∫–∏–π –æ—Ä–µ—Ö (15 –≥)",
    3: "–ú–∏–Ω—Ç–∞–π (90 –≥), —Å–º–µ—Å—å –±—É—Ä–æ–≥–æ –∏ –¥–∏–∫–æ–≥–æ —Ä–∏—Å–∞ (180 –≥), –±—Ä–æ–∫–∫–æ–ª–∏, —Ü–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞, –∫–∞–±–∞—á–æ–∫ ‚Äì 210 –≥, –∞–≤–æ–∫–∞–¥–æ (50 –≥)",
    4: "–ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ (90 –≥), –∫–∏–Ω–æ–∞ (180 –≥), —Å–∞–ª–∞—Ç: —Å–≤–µ–∫–ª–∞ –≤–∞—Ä—ë–Ω–∞—è (100 –≥), –º–æ—Ä–∫–æ–≤—å —Å–≤–µ–∂–∞—è (100 –≥), –∫—É—Ä–∞–≥–∞ (20 –≥)",
    5: "–ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ (80 –≥), —Å–º–µ—Å—å –±—É—Ä–æ–≥–æ –∏ –¥–∏–∫–æ–≥–æ —Ä–∏—Å–∞ (180 –≥), –∫–∞–±–∞—á–æ–∫ (100 –≥), –∞–≤–æ–∫–∞–¥–æ (40 –≥)",
    6: "–ú–∏–Ω—Ç–∞–π (90 –≥), —Ä–∏—Å –±—É—Ä—ã–π (180 –≥), –º–æ—Ä–∫–æ–≤—å (150 –≥), –∞–≤–æ–∫–∞–¥–æ (40 –≥)"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üçΩÔ∏è –ó–∞–≤—Ç—Ä–∞–∫"), KeyboardButton("ü•ú –ü–µ—Ä–µ–∫—É—Å")],
        [KeyboardButton("üç≤ –û–±–µ–¥"), KeyboardButton("üåô –£–∂–∏–Ω")],
        [KeyboardButton("üìù –û—Ç—á—ë—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é"), KeyboardButton("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–¥–µ–ª–∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –ø–∏—à–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é:", reply_markup=reply_markup)

async def send_meal(update: Update, context: ContextTypes.DEFAULT_TYPE, meal_type: str):
    day_idx = datetime.now().weekday()
    day_name = DAY_NAMES[day_idx]
    meal_dicts = {
        "üçΩÔ∏è –∑–∞–≤—Ç—Ä–∞–∫": AIP_BREAKFASTS,
        "ü•ú –ø–µ—Ä–µ–∫—É—Å": AIP_SNACKS,
        "üç≤ –æ–±–µ–¥": AIP_LUNCHES,
        "üåô —É–∂–∏–Ω": AIP_DINNERS
    }
    label = meal_type.lower()
    meal = meal_dicts[label].get(day_idx, "–ù–µ—Ç –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")

    await update.message.reply_text(f"üìÖ –°–µ–≥–æ–¥–Ω—è {day_name}\n\n{label.capitalize()}:\n{meal}")

    response = openai_client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {
                "role": "system",
                "content": f"–¢—ã ‚Äî –±–æ—Ç-–¥–∏–µ—Ç–æ–ª–æ–≥. –î–∞–π –∫–æ—Ä–æ—Ç–∫—É—é, –ø–æ–ª–µ–∑–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–µ—Ä–µ–¥ {label}, –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è AIP –∏ –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã. –ë—É–¥—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º."
            },
            {
                "role": "user",
                "content": f"–°–µ–≥–æ–¥–Ω—è {day_name}. –°–µ–π—á–∞—Å {label}. –ß—Ç–æ –º–Ω–µ —Å—Ç–æ–∏—Ç —É—á–µ—Å—Ç—å –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –ø—Ä–∏—ë–º–æ–º –ø–∏—â–∏?"
            }
        ]
    )
    reply = response.choices[0].message.content
    await update.message.reply_text(f"üí° {reply}")

async def weekly_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é –Ω–µ–¥–µ–ª—é...")

    data = sheet.get_all_values()
    rows = data[-7:] if len(data) > 7 else data[1:]

    water_list, mood_list = [], []
    stool_days, activity_days = 0, 0
    meals = []

    for row in rows:
        try:
            water = row[2].replace(",", ".").strip()
            water_list.append(float(water))
        except: pass

        if "–¥–∞" in row[1].strip().lower() or "–±—ã–ª" in row[1].strip().lower():
            stool_days += 1
        if row[3].strip():
            activity_days += 1
        try:
            mood_list.append(int(row[9].strip()))
        except: pass

        meals.extend([
            "üçΩÔ∏è –ó–∞–≤—Ç—Ä–∞–∫: " + row[4],
            "üç≤ –û–±–µ–¥: " + row[5],
            "üåô –£–∂–∏–Ω: " + row[6],
            "ü•ú –ü–µ—Ä–µ–∫—É—Å—ã: " + row[7],
            "‚òï –°–ª–∞–¥–∫–æ–µ / –Ω–∞–ø–∏—Ç–∫–∏: " + row[8], ""
        ])

    summary = f"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:
- üíß –í–æ–¥–∞: {round(sum(water_list)/len(water_list), 2) if water_list else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'} –ª/–¥–µ–Ω—å
- üöΩ –°—Ç—É–ª: {stool_days} –¥–Ω–µ–π –∏–∑ 7
- ü§∏ –î–≤–∏–∂–µ–Ω–∏–µ: {activity_days} –¥–Ω–µ–π
- üôÇ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {round(sum(mood_list)/len(mood_list), 1) if mood_list else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'} / 10
\n–ü–∏—Ç–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º:\n{chr(10).join(meals)}"""

    await update.message.reply_text(summary)

    response = openai_client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {
                "role": "system",
                "content": "–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –±–æ—Ç-–¥–∏–µ—Ç–æ–ª–æ–≥. –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–¥–µ, —Å—Ç—É–ª—É, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –∏ –ø–∏—Ç–∞–Ω–∏—é –∑–∞ –Ω–µ–¥–µ–ª—é ‚Äî –¥–∞–π 3‚Äì5 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–∏—à–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, —Å —ç–º–æ–¥–∑–∏."
            },
            {
                "role": "user",
                "content": f"–í–æ—Ç –º–æ–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é:\n{summary}\n–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –º–Ω–µ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å?"
            }
        ]
    )
    reply = response.choices[0].message.content
    await update.message.reply_text("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n" + reply)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()

    if "–∑–∞–≤—Ç—Ä–∞–∫" in text:
        await send_meal(update, context, "üçΩÔ∏è –∑–∞–≤—Ç—Ä–∞–∫")
        return
    if "–ø–µ—Ä–µ–∫—É—Å" in text:
        await send_meal(update, context, "ü•ú –ø–µ—Ä–µ–∫—É—Å")
        return
    if "–æ–±–µ–¥" in text:
        await send_meal(update, context, "üç≤ –æ–±–µ–¥")
        return
    if "—É–∂–∏–Ω" in text:
        await send_meal(update, context, "üåô —É–∂–∏–Ω")
        return
    if "–ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–¥–µ–ª–∏" in text:
        await weekly_progress(update, context)
        return
    if "–æ—Ç—á—ë—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é" in text or "–æ—Ç—á–µ—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é" in text:
        await update.message.reply_text(
            "üìù –í–æ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç—á—ë—Ç–∞. –ü—Ä–æ—Å—Ç–æ –¥–æ–ø–æ–ª–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å:\n\n"
            "–ó–∞–≤—Ç—Ä–∞–∫: ...\n–û–±–µ–¥: ...\n–£–∂–∏–Ω: ...\n–ü–µ—Ä–µ–∫—É—Å—ã: ...\n–°–ª–∞–¥–∫–æ–µ / –Ω–∞–ø–∏—Ç–∫–∏: ...\n"
            "–í–æ–¥–∞: ...\n–°—Ç—É–ª: ...\n–î–≤–∏–∂–µ–Ω–∏–µ: ...\n–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ..."
        )
        return

    row = ["" for _ in range(11)]
    row[0] = datetime.now().strftime("%Y-%m-%d")
    for line in text.split('\n'):
        for idx, key in enumerate(["—Å—Ç—É–ª", "–≤–æ–¥–∞", "–¥–≤–∏–∂–µ–Ω–∏–µ", "–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥", "—É–∂–∏–Ω", "–ø–µ—Ä–µ–∫—É—Å", "—Å–ª–∞–¥–∫–æ–µ", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"]):
            if key in line:
                row[idx+1] = line.split(":", 1)[-1].strip()
                break
        else:
            row[10] += line.strip() + " "

    sheet.append_row(row)
    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º!")

app = ApplicationBuilder().token(os.environ["BOT_TOKEN"]).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.run_polling()
