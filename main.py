import os
import json
import openai
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import ReplyKeyboardMarkup, KeyboardButton

# Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(os.environ["CREDS_JSON"])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(os.environ["SPREADSHEET_URL"]).sheet1

# /start –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üåÖ –£—Ç—Ä–æ")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü–∏—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å (–≤–æ–¥–∞, –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ç.–¥.) –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëá",
        reply_markup=reply_markup
    )
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# –ö–æ–º–∞–Ω–¥–∞ /morning –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "–£—Ç—Ä–æ" ‚Äî —Å GPT
async def morning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –î—É–º–∞—é –Ω–∞–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–ª—è —Ç–µ–±—è...")

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",  # –ò–ª–∏ "gpt-4", –µ—Å–ª–∏ —É —Ç–µ–±—è –≤–∫–ª—é—á–µ–Ω–æ
        messages=[
            {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –±–æ—Ç –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è. –î–∞–π —Å–æ–≤–µ—Ç—ã –Ω–∞ –¥–µ–Ω—å: —á—Ç–æ –≤—ã–ø–∏—Ç—å, —á—Ç–æ –ø–æ–µ—Å—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫, –∫–∞–∫ —Ä–∞–∑–º—è—Ç—å—Å—è. –ö—Ä–∞—Ç–∫–æ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏."},
            {"role": "user", "content": "–£—Ç—Ä–æ. –ß—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è, —á—Ç–æ–±—ã –∑–∞—Ä—è–¥–∏—Ç—å—Å—è —ç–Ω–µ—Ä–≥–∏–µ–π –∏ —É–ª—É—á—à–∏—Ç—å –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ?"}
        ]
    )

    reply = response.choices[0].message["content"]
    await update.message.reply_text(reply)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()

    if "—É—Ç—Ä–æ" in text or "morning" in text:
        await morning(update, context)
        return

    # –∏–Ω–∞—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥
    row = [""] * 11
    row[0] = datetime.now().strftime("%Y-%m-%d")
    for line in text.split('\n'):
        if "—Å—Ç—É–ª" in line:
            row[1] = line.split(":", 1)[-1].strip()
        elif "–≤–æ–¥–∞" in line:
            row[2] = line.split(":", 1)[-1].strip()
        elif "–¥–≤–∏–∂–µ–Ω–∏–µ" in line:
            row[3] = line.split(":", 1)[-1].strip()
        elif "–∑–∞–≤—Ç—Ä–∞–∫" in line:
            row[4] = line.split(":", 1)[-1].strip()
        elif "–æ–±–µ–¥" in line:
            row[5] = line.split(":", 1)[-1].strip()
        elif "—É–∂–∏–Ω" in line:
            row[6] = line.split(":", 1)[-1].strip()
        elif "–ø–µ—Ä–µ–∫—É—Å" in line:
            row[7] = line.split(":", 1)[-1].strip()
        elif "—Å–ª–∞–¥–∫–æ–µ" in line:
            row[8] = line.split(":", 1)[-1].strip()
        elif "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ" in line:
            row[9] = line.split(":", 1)[-1].strip()
        else:
            row[10] += line.strip() + " "

    sheet.append_row(row)
    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º!")
       
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(os.environ["BOT_TOKEN"]).build()
openai.api_key = os.environ["OPENAI_API_KEY"]
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.run_polling()
